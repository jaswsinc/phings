<?xml version="1.0" encoding="UTF-8" ?>

<project>

  <!-- ============================================  -->
  <!-- Get GitHub JSON properties. -->
  <!-- ============================================  -->

  <adHoc-task name="adHocGitHubGetJson">
    <![CDATA[
      class adHocGitHubGetJson extends Task {
          protected $api_url = '';
          protected $property_prefix = '';
          protected $property_list = [];

          /* ---------------------------- */

          public function setApiUrl($api_url) {
              $this->api_url = trim((string) $api_url);
          }
          public function setPropertyPrefix($property_prefix) {
              $this->property_prefix = trim((string) $property_prefix);
          }
          public function setPropertyList($property_list) {
              $this->property_list = preg_split('/[\s,]+/u', trim((string) $property_list), -1, PREG_SPLIT_NO_EMPTY);
          }
          /* ---------------------------- */

          protected function dotKeys(array $array)
          {
              $dot_keys = []; // Initialize.
              $Iterator = new \RecursiveIteratorIterator(new \RecursiveArrayIterator($array));

              foreach ($Iterator as $_key => $_value) {
                  $_keys = []; // Initialize keys.

                  foreach (range(0, $Iterator->getDepth()) as $_depth) {
                      $_keys[] = $Iterator->getSubIterator($_depth)->key();
                  }
                  $dot_keys[implode('.', $_keys)] = $_value;
                  // unset($_keys, $_depth); // Housekeeping.
              } // unset($_key, $_value); // Housekeeping.

              return $dot_keys;
          }
          /* ---------------------------- */

          public function main() {
              if (!$this->api_url) {
                  return; // Not possible.
              } elseif (!$this->property_prefix) {
                  return; // Not possible.
              } elseif (!$this->property_list) {
                  return; // Not possible.
              } elseif (!$this->project->getProperty('_ws_json.phings.github.api_key')) {
                  return; // Not possible.
              }
              $http_context = stream_context_create(['http' => [
                  'method'           => 'GET',
                  'protocol_version' => '1.1',
                  'header'           => 'accept: application/json'."\r\n".
                                        'authorization: token '.$this->project->getProperty('_ws_json.phings.github.api_key')."\r\n",
              ]]);
              echo $this->project->getProperty('_ws_json.phings.github.api_key');
              $api_response = json_decode((string) file_get_contents($this->api_url, false, $http_context));

              foreach ($this->dotKeys((array) $api_response) as $_key => $_value) {
                  if (in_array($_key, $this->property_list, true)) {
                      $this->project->setProperty($this->property_prefix.$_key, $_value);
                  }
              } // unset($_key, $_value); // Housekeeping.
          }
      }
    ]]>
  </adHoc-task>

</project>
