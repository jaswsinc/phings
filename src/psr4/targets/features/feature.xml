<?xml version="1.0" encoding="UTF-8" ?>

<project>

  <!-- ============================================  -->
  <!-- Create a GitHub feature branch & PR.  -->
  <!-- ============================================  -->

  <target name="-features-feature" depends="-validations-in-git-repo,-validations-in-github-repo,-validations-in-clean-git-repo,-validations-git-repo-has-dev-master,-validations-github-credentials" hidden="true">

    <!-- Make sure we are on the dev branch or a feature branch. -->
    <!-- Starting from the dev branch is only allowed when starting. -->
    <!-- Starting from a feature branch is only allowed when finishing. -->
    <if>
      <or>
        <and>
          <not>
            <isset property="action" />
          </not>
          <isTrue value="${_starting_git_branch_is_dev}" />
        </and>
        <and>
          <isset property="action" />
          <equals arg1="${action}" arg2="start" />
          <isTrue value="${_starting_git_branch_is_dev}" />
        </and>
        <and>
          <isset property="action" />
          <equals arg1="${action}" arg2="finish" />
          <isTrue value="${_starting_git_branch_is_feature}" />
        </and>
      </or>
      <then>
        <echo msg="Currently on a dev or feature branch. OK." />
      </then>
      <else>
        <fail msg="Invalid request. Must start from the dev branch when beginning a new feature, and from an existing feature branch when finishing." />
      </else>
    </if>

    <!-- Ask for the issue number associated w/ feature. -->
    <!-- If set via `-D issue=123` at the command line, this prompt is not shown. -->
    <!-- If the starting branch is a feature/ branch, use the issue number from that branch and skip this. -->
    <if>
      <and>
        <isTrue value="${_starting_git_branch_is_feature}" />
      </and>
      <then>
        <property name="_features_feature_issue_number" value="${_starting_git_feature_branch_issue}" />
      </then>
      <else>
        <propertyPrompt propertyName="issue" defaultValue="e.g., 123" promptCharacter="" useExistingValue="true" promptText="Enter Issue #" />

        <property name="_features_feature_issue_number" value="${issue}">
          <filterChain>
            <replaceRegExp>
              <regExp pattern="[^0-9]+" replace="" modifiers="u" />
            </replaceRegExp>
          </filterChain>
        </property>

        <if>
          <or>
            <equals arg1="${issue}" arg2="e.g., 123" />
            <equals arg1="${_features_feature_issue_number}" arg2="0" />
            <equals arg1="${_features_feature_issue_number}" arg2="" />
          </or>
          <then>
            <fail msg="Missing numeric issue number. Please try again." />
          </then>
        </if>
      </else>
    </if>

    <!-- Define the name of the new feature branch, along with misc. GitHub references. -->

    <property name="_features_feature_branch" value="feature/${_features_feature_issue_number}" />
    <property name="_features_feature_issue_ref" value="${project_owner}/${project_issues_slug}#${_features_feature_issue_number}" />
    <property name="_features_feature_issue_url" value="https://github.com/${project_owner}/${project_issues_slug}/issues/${_features_feature_issue_number}" />
    <adHocGitHubGetJson apiUrl="https://api.github.com/repos/${project_owner}/${project_issues_slug}/issues/${_features_feature_issue_number}" propertyPrefix="_features_feature_issue_" propertyList="title" />

    <!-- Establish a title for the PR that will be created below. -->
    <!-- Note: The issue title could be empty (or not set at all); e.g., a PR for an issue that doesn't exist yet. -->

    <if>
      <and>
        <isset property="_features_feature_issue_title" />
        <not>
          <equals arg1="${_features_feature_issue_title}" arg2="" />
        </not>
      </and>
      <then>
        <property name="_features_feature_pr_title_body" value="[PR] ${_features_feature_issue_title}${line.separator}${line.separator}See: ${_features_feature_issue_ref}" />
      </then>
      <else>
        <property name="_features_feature_pr_title_body" value="[PR] ${_features_feature_branch}${line.separator}${line.separator}See: ${_features_feature_issue_ref}" />
      </else>
    </if>

    <!-- Make sure we have the latest copy of all remote branches. -->
    <echo />

    <echo msg="Fetching latest copy of all branches from remote origin." />

    <exec command="git fetch origin" dir="${project.basedir}" checkReturn="true" />

    <!-- If starting from a feature branch, finish the feature instead of starting a new one. -->
    <!-- Otherwise, interpret as the desire to start a new feature branch based on the dev branch. -->
    <if>
      <and>
        <isTrue value="${_starting_git_branch_is_feature}" />
      </and>
      <then>
        <exec command="git ls-remote --exit-code origin refs/heads/${_features_feature_branch}" dir="${project.basedir}" returnProperty="_features_feature_branch_exists_remotely_return_status" />
        <if>
          <not>
            <isFailure code="${_features_feature_branch_exists_remotely_return_status}" />
          </not>
          <then>
            <if>
              <and>
                <isset property="force" />
                <isTrue value="${force}" />
              </and>
              <then>
                <echo />

                <echo msg="The ${_features_feature_branch} branch exists at remote origin. OK." />
              </then>
              <else>
                <fail msg="The ${_features_feature_branch} branch still exists at remote origin. It must be merged &amp; deleted by the project lead first. Or, if you're the project lead, you can set the `force=true` flag to force a merge and automatically delete the remote feature branch." />
              </else>
            </if>
            <property name="_features_feature_branch_exists_remotely" value="true" />
          </then>
          <else>
            <echo />

            <echo msg="The ${_features_feature_branch} branch doesn't exist at remote origin. OK." />
            <property name="_features_feature_branch_exists_remotely" value="false" />
          </else>
        </if>

        <if>
          <and>
            <isTrue value="${_features_feature_branch_exists_remotely}" />
          </and>
          <then>
            <exec command="git log --oneline '${_features_feature_branch}..${_features_feature_branch}@{upstream}'" dir="${project.basedir}" outputProperty="_features_feature_branch_log_output" />
            <if>
              <not>
                <equals arg1="${_features_feature_branch_log_output}" arg2="" trim="true" />
              </not>
              <then>
                <fail msg="Your local copy of the ${_features_feature_branch} branch is behind in commits. Please merge with the remote and try again." />
              </then>
              <else>
                <echo />

                <echo msg="The ${_features_feature_branch} branch is not behind upstream remote. OK." />
              </else>
            </if>
          </then>
        </if>

        <echo />

        <echo msg="Moving back to dev branch &amp; merging latest remote changes." />
        <exec command="git checkout dev" dir="${project.basedir}" checkReturn="true" />
        <exec command="git pull origin dev" dir="${project.basedir}" checkReturn="true" />

        <echo />

        <if>
          <and>
            <isset property="force" />
            <isTrue value="${force}" />
          </and>
          <then>
            <echo msg="Merging local ${_features_feature_branch} branch into local dev branch with `--no-ff` flag." />
            <exec command="git merge --no-ff ${_features_feature_branch}" dir="${project.basedir}" checkReturn="true" />

            <echo />

            <echo msg="Pushing local dev branch (with ${_features_feature_branch} merged in) to remote origin." />
            <exec command="git push --set-upstream origin dev" dir="${project.basedir}" checkReturn="true" />

            <echo />

            <echo msg="Deleting local ${_features_feature_branch} branch." />
            <exec command="git branch --delete ${_features_feature_branch}" dir="${project.basedir}" checkReturn="true" />

            <if>
              <and>
                <isTrue value="${_features_feature_branch_exists_remotely}" />
              </and>
              <then>
                <echo />
                <echo msg="Deleting remote ${_features_feature_branch} branch." />
                <exec command="git push origin --delete ${_features_feature_branch}" dir="${project.basedir}" checkReturn="true" />
              </then>
            </if>
          </then>
          <else>
            <echo msg="Deleting local ${_features_feature_branch} branch." />
            <exec command="git branch --delete ${_features_feature_branch}" dir="${project.basedir}" checkReturn="true" />
          </else>
        </if>
      </then>

      <!-- If feature branch already exists, move to that branch. Else, create a new feature branch and push to remote origin. -->
      <!-- Branch may already exist locally or remotely. In either case, avoid creating a duplicate feature branch. -->

      <else>
        <exec command="git rev-parse --verify --quiet ${_features_feature_branch}" dir="${project.basedir}" returnProperty="_features_feature_branch_exists_locally_return_status" />
        <exec command="git ls-remote --exit-code origin refs/heads/${_features_feature_branch}" dir="${project.basedir}" returnProperty="_features_feature_branch_exists_remotely_return_status" />
        <if>
          <not>
            <isFailure code="${_features_feature_branch_exists_locally_return_status}" />
          </not>
          <then>
            <echo />

            <echo msg="The ${_features_feature_branch} branch already exists locally." />
            <echo msg="Moving you to the existing local ${_features_feature_branch} branch." />
            <exec command="git checkout ${_features_feature_branch}" dir="${project.basedir}" checkReturn="true" />
          </then>
          <elseif>
            <not>
              <isFailure code="${_features_feature_branch_exists_remotely_return_status}" />
            </not>
            <then>
              <echo />

              <echo msg="The ${_features_feature_branch} branch already exists remotely." />
              <echo msg="Creating a new ${_features_feature_branch} branch locally; based on existing remote origin." />
              <exec command="git checkout -b ${_features_feature_branch} origin/${_features_feature_branch}" dir="${project.basedir}" checkReturn="true" />
            </then>
          </elseif>
          <else>
            <echo />

            <echo msg="The ${_features_feature_branch} branch doesn't exist locally or remotely. OK." />

            <echo />

            <echo msg="Pulling latest remote dev branch; i.e., starting from an up-to-date copy." />
            <exec command="git pull origin dev" dir="${project.basedir}" checkReturn="true" />

            <echo />

            <echo msg="Creating ${_features_feature_branch} branch; based on latest dev branch." />
            <exec command="git checkout -b ${_features_feature_branch}" dir="${project.basedir}" checkReturn="true" />

            <if>
              <and>
                <isset property="pr" />
                <isFalse value="${pr}" />
              </and>
              <then>
                <echo />

                <echo msg="Pushing ${_features_feature_branch} branch to remote origin." />
                <exec command="git push --set-upstream origin ${_features_feature_branch}" dir="${project.basedir}" checkReturn="true" />

                <echo />

                <echo msg="Nice! A new feature is coming soon. Make some commits and push your changes." />
                <echo msg="~ Open a PR at GitHub when you're done." />
              </then>
              <else>
                <echo />

                <echo msg="Updating `.gitchange` in the ${_features_feature_branch} branch so that a PR is possible." />
                <adHocUserSpecificGitChange dir="${project.basedir}" />

                <echo />

                <echo msg="Pushing the ${_features_feature_branch} branch to remote origin." />
                <exec command="git add --all" dir="${project.basedir}" checkReturn="true" />
                <exec command="git commit --message='Preparing pull request. See: ${_features_feature_issue_ref}' --no-edit" dir="${project.basedir}" checkReturn="true" />
                <exec command="git push --set-upstream origin ${_features_feature_branch}" dir="${project.basedir}" checkReturn="true" />

                <echo />

                <echo msg="Opening a pull request at GitHub for future commits in the ${_features_feature_branch} branch." />
                <exec executable="/usr/bin/env" dir="${project.basedir}" checkReturn="true">
                  <arg value="hub" />
                  <arg value="pull-request" />
                  <arg value="-m" />
                  <arg value="${_features_feature_pr_title_body}" />
                  <arg value="-h" />
                  <arg value="${_features_feature_branch}" />
                  <arg value="-b" />
                  <arg value="dev" />
                </exec>
                <echo />

                <echo msg="Nice! A new feature is coming soon. Make some commits and push your changes." />
                <echo msg="~ Ask for a review in the PR at GitHub when you're done." />
              </else>
            </if>
          </else>
        </if>

      </else>
    </if>

  </target>

</project>
