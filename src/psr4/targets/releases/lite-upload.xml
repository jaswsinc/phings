<?xml version="1.0" encoding="UTF-8" ?>

<project>

  <!-- ============================================  -->
  <!-- Upload lite distros & maybe update latest. -->
  <!-- ============================================  -->

  <target name="-releases-lite-upload" depends="-validations-existing-lite-build" hidden="true">

    <!-- Convey what is about to happen below. -->

    <echo msg="Uploading lite distros to Amazon S3/CloudFront storage ..." />

    <!-- Obfuscate the project sub-path for more secure S3 storage. -->

    <adHocAwsS3ObfuscateSubPath base="software/releases" slug="${project_lite_slug}" version="${project_version}" returnProperty="_releases_lite_upload_sub_path" />
    <adHocAwsS3ObfuscateSubPath base="software/latest" slug="${project_lite_slug}" returnProperty="_releases_lite_upload_latest_sub_path" />

    <!-- Upload distros as release packages, and maybe update the 'latest' packages also. -->

    <forEach list="zip,tar.gz,phar" delimiter="," target="--releases-lite-upload-extension" param="__releases_lite_upload_extension" />

    <!-- If doing a formal release, update `${project_lite_slug}/version.txt`. -->
    <if>
      <and>
        <isFalse value="${_releases_release_type_is_rc}" />
      </and>
      <then>
        <phingCall target="--releases-lite-upload-version" />
      </then>
    </if>

  </target>

  <!-- This target is used by the foreach loop above to reduce the amount of code we need to maintain. -->

  <target name="--releases-lite-upload-extension" hidden="true">

    <if>
      <and>
        <available resource="${project.basedir}/.~build/${project_lite_slug}/.~build/${project_lite_slug}.${__releases_lite_upload_extension}" type="file" />
      </and>
      <then>
        <!-- Determine the MIME type based on the extension. -->

        <if>
          <equals arg1="${__releases_lite_upload_extension}" arg2="zip" />
          <then>
            <property name="__releases_lite_upload_mime_type" value="application/zip" override="true" />
          </then>
          <elseif>
            <equals arg1="${__releases_lite_upload_extension}" arg2="tar.gz" />
            <then>
              <property name="__releases_lite_upload_mime_type" value="application/gzip" override="true" />
            </then>
          </elseif>
          <elseif>
            <equals arg1="${__releases_lite_upload_extension}" arg2="phar" />
            <then>
              <property name="__releases_lite_upload_mime_type" value="application/x-phar" override="true" />
            </then>
          </elseif>
          <else>
            <fail msg="Unexpected file extension: ${__releases_lite_upload_extension}" />
          </else>
        </if>
        <!-- Upload a release distro based on extension and MIME type. -->

        <exec executable="aws" passthru="true" checkReturn="true">
          <arg value="--profile" />
          <arg value="websharks" />

          <arg value="s3" />
          <arg value="cp" />

          <arg value="${project.basedir}/.~build/${project_lite_slug}/.~build/${project_lite_slug}.${__releases_lite_upload_extension}" />
          <arg value="s3://${_aws_bucket}/cloudfront/${_releases_lite_upload_sub_path}.${__releases_lite_upload_extension}" />

          <arg value="--metadata" />
          <arg value="version=${project_version}" />

          <arg value="--content-type" />
          <arg value="${__releases_lite_upload_mime_type}" />

          <arg value="--content-disposition" />
          <arg value='attachment; filename="${project_lite_slug}-v${project_version}.${__releases_lite_upload_extension}"' />
        </exec>
        <echo msg="https://${_aws_bucket_cname}/${_releases_lite_upload_sub_path}.${__releases_lite_upload_extension}" />

        <echo msg="${line.separator}" file="${_tmp_sub_dir}/${project_slug}-release-urls" append="true" />
        <echo msg="https://${_aws_bucket_cname}/${_releases_lite_upload_sub_path}.${__releases_lite_upload_extension}" file="${_tmp_sub_dir}/${project_slug}-release-urls" append="true" />

        <!-- If doing a formal release, copy this version into the 'latest' package. -->
        <if>
          <and>
            <isFalse value="${_releases_release_type_is_rc}" />
          </and>
          <then>
            <echo />

            <exec executable="aws" passthru="true" checkReturn="true">
              <arg value="--profile" />
              <arg value="websharks" />

              <arg value="s3" />
              <arg value="cp" />

              <arg value="s3://${_aws_bucket}/cloudfront/${_releases_lite_upload_sub_path}.${__releases_lite_upload_extension}" />
              <arg value="s3://${_aws_bucket}/cloudfront/${_releases_lite_upload_latest_sub_path}.${__releases_lite_upload_extension}" />
            </exec>
            <echo msg="https://${_aws_bucket_cname}/${_releases_lite_upload_latest_sub_path}.${__releases_lite_upload_extension}" />

            <echo msg="${line.separator}" file="${_tmp_sub_dir}/${project_slug}-release-urls" append="true" />
            <echo msg="https://${_aws_bucket_cname}/${_releases_lite_upload_latest_sub_path}.${__releases_lite_upload_extension}${line.separator}" file="${_tmp_sub_dir}/${project_slug}-release-urls" append="true" />
          </then>
        </if>
      </then>
      <else>
        <echo msg="Distro with extension `.${__releases_lite_upload_extension}` does not exist. Bypassing." />
      </else>
    </if>

  </target>

  <!-- Uploads a `${project_lite_slug}/version.txt` file we can query. -->

  <target name="--releases-lite-upload-version" hidden="true">

    <exec executable="aws" passthru="true" checkReturn="true">
      <arg value="--profile" />
      <arg value="websharks" />

      <arg value="s3" />
      <arg value="cp" />

      <arg value="${project.basedir}/.~build/${project_lite_slug}/.~build/.~/properties/project-version" />
      <arg value="s3://${_aws_bucket}/cloudfront/software/latest/${project_lite_slug}/version.txt" />

      <arg value="--metadata" />
      <arg value="version=${project_version}" />

      <arg value="--content-type" />
      <arg value="text/plain; charset=utf-8" />
    </exec>
    <echo msg="https://${_aws_bucket_cname}/software/latest/${project_lite_slug}/version.txt" />

    <echo msg="${line.separator}" file="${_tmp_sub_dir}/${project_slug}-release-urls" append="true" />
    <echo msg="https://${_aws_bucket_cname}/software/latest/${project_lite_slug}/version.txt${line.separator}" file="${_tmp_sub_dir}/${project_slug}-release-urls" append="true" />

  </target>

</project>
