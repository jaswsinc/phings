<?xml version="1.0" encoding="UTF-8" ?>

  <project>

    <!-- ============================================  -->
    <!-- Update lite repo (including remote). -->
    <!-- ============================================  -->

    <target name="-releases-lite-repo-update" hidden="true">

      <!-- Begin by stating what is about to happen. -->

      <echo msg="Preparing to update ${project_lite_title} lite repo." />

      <!-- Establish a shorter reference to the lite repo directory & define the remote origin. -->

      <property name="_releases_lite_repo_update_dir" value="${project.basedir}/.~build/${project_lite_slug}/.~build/${project_lite_slug}-repo" />
      <property name="_releases_lite_repo_update_remote" value="git@github.com:${project_owner}/${project_lite_slug}.git" />

      <!-- Clone lite repository from the remote. -->

      <echo />

      <echo msg="Cloning remote lite repo for local update routines that follow." />

      <delete dir="${_releases_lite_repo_update_dir}" includeEmptyDirs="true" quiet="true" />
      <exec command="git clone '${_releases_lite_repo_update_remote}' '${_releases_lite_repo_update_dir}'" checkReturn="true" />

      <!-- Make sure the repo has a dev and master branch that we can work with below. -->
      <!-- Also make sure that we start (always) from the 000000-dev branch for remaining routines. -->

      <echo />

      <echo msg="Forcing the existence of both a dev and master branch." />

      <exec command="git rev-parse --verify --quiet 000000-dev" dir="${_releases_lite_repo_update_dir}" returnProperty="_releases_lite_repo_update_git_dev_branch_exists_return_status" />
      <exec command="git ls-remote --exit-code origin refs/heads/000000-dev" dir="${_releases_lite_repo_update_dir}" returnProperty="_releases_lite_repo_update_git_remote_dev_branch_exists_return_status" />

      <exec command="git rev-parse --verify --quiet master" dir="${_releases_lite_repo_update_dir}" returnProperty="_releases_lite_repo_update_git_master_branch_exists_return_status" />
      <exec command="git ls-remote --exit-code origin refs/heads/master" dir="${_releases_lite_repo_update_dir}" returnProperty="_releases_lite_repo_update_git_remote_master_branch_exists_return_status" />
      <if>
        <and>
          <isFailure code="${_releases_lite_repo_update_git_dev_branch_exists_return_status}" />
        </and>
        <then>
          <if>
            <not>
              <isFailure code="${_releases_lite_repo_update_git_remote_dev_branch_exists_return_status}" />
            </not>
            <then>
              <exec command="git checkout -b 000000-dev origin/000000-dev" dir="${_releases_lite_repo_update_dir}" checkReturn="true" />
            </then>
            <else>
              <exec command="git checkout -b 000000-dev" dir="${_releases_lite_repo_update_dir}" checkReturn="true" />

              <adHocUserSpecificGitChange dir="${_releases_lite_repo_update_dir}" />
              <exec command="git add --all" dir="${_releases_lite_repo_update_dir}" checkReturn="true" />
              <exec command="git commit --message='Creating 000000-dev branch.' --no-edit" dir="${_releases_lite_repo_update_dir}" checkReturn="true" />

              <exec command="git push --set-upstream origin 000000-dev" dir="${_releases_lite_repo_update_dir}" checkReturn="true" />
            </else>
          </if>
        </then>
      </if>
      <if>
        <and>
          <isFailure code="${_releases_lite_repo_update_git_master_branch_exists_return_status}" />
        </and>
        <then>
          <if>
            <not>
              <isFailure code="${_releases_lite_repo_update_git_remote_master_branch_exists_return_status}" />
            </not>
            <then>
              <exec command="git checkout -b master origin/master" dir="${_releases_lite_repo_update_dir}" checkReturn="true" />
            </then>
            <else>
              <exec command="git checkout -b master" dir="${_releases_lite_repo_update_dir}" checkReturn="true" />

              <adHocUserSpecificGitChange dir="${_releases_lite_repo_update_dir}" />
              <exec command="git add --all" dir="${_releases_lite_repo_update_dir}" checkReturn="true" />
              <exec command="git commit --message='Creating master branch.' --no-edit" dir="${_releases_lite_repo_update_dir}" checkReturn="true" />

              <exec command="git push --set-upstream origin master" dir="${_releases_lite_repo_update_dir}" checkReturn="true" />
            </else>
          </if>
        </then>
      </if>
      <exec command="git checkout 000000-dev" dir="${_releases_lite_repo_update_dir}" checkReturn="true" />

      <!-- Delete all existing files in lite dev branch. -->

      <echo />

      <echo msg="Deleting (clearing out) all files in dev branch of the newly-cloned repo." />

      <delete includeEmptyDirs="true" quiet="true">
        <fileSet dir="${_releases_lite_repo_update_dir}" caseSensitive="false" defaultExcludes="false">
          <exclude pattern=".git" />
          <exclude pattern=".git/**" />
        </fileSet>
      </delete>

      <!-- Copy new files into lite dev branch. -->
      <!-- Force changes to exist in the lite dev branch so that commit/push does not choke. -->
      <!-- e.g., If nothing in the build directory changes anything in the dev branch, we need a `.gitchange`. -->

      <echo />

      <echo msg="Updating dev branch to: ${project.basedir}/.~build/${project_lite_slug} (i.e., most recent lite build)." />

      <copy toDir="${_releases_lite_repo_update_dir}">
        <fileSet dir="${project.basedir}/.~build/${project_lite_slug}" caseSensitive="false" defaultExcludes="false">
          <patternSet refId="_lite_repo_pattern_set" />
        </fileSet>
      </copy>
      <adHocUserSpecificGitChange dir="${_releases_lite_repo_update_dir}" />

      <!-- Stage and commit changes that exist here in the dev branch. -->

      <echo />

      <echo msg="Committing changes in lite dev branch." />

      <delete file="${_tmp_sub_dir}/${project_lite_slug}-commit-msg" quiet="true" />
      <echo msg="Generating new commit message based on CHANGELOG.md file contents if at all possible." />
      <adHocExtractChangelogForVersion version="${project_version}" inFile="${_releases_lite_repo_update_dir}/CHANGELOG.md" heading="Phing release of v${project_version} with the following changes:" outFile="${_tmp_sub_dir}/${project_lite_slug}-commit-msg" />
      <if>
        <not>
          <available resource="${_tmp_sub_dir}/${project_lite_slug}-commit-msg" type="file" />
        </not>
        <then>
          <echo msg="Phing release of v${project_version}." file="${_tmp_sub_dir}/${project_lite_slug}-commit-msg" />
        </then>
      </if>
      <exec command="git add --all" dir="${_releases_lite_repo_update_dir}" checkReturn="true" />
      <exec command="git commit --file='${_tmp_sub_dir}/${project_lite_slug}-commit-msg' --no-edit" dir="${_releases_lite_repo_update_dir}" checkReturn="true" />

      <!-- Push changes in the dev branch to remote origin. -->

      <echo />

      <echo msg="Pushing all changes in the dev branch to remote." />
      <exec command="git push --set-upstream origin 000000-dev" dir="${_releases_lite_repo_update_dir}" checkReturn="true" />

    </target>

  </project>
