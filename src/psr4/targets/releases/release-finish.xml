<?xml version="1.0" encoding="UTF-8" ?>

  <project>

    <!-- ============================================  -->
    <!-- Create a GitHub release. -->
    <!-- ============================================  -->

    <target name="-releases-release-finish" depends="-validations-existing-build,-validations-starting-git-release-branch,-validations-aws-cli-credentials" hidden="true">

      <!-- Begin by stating what is about to happen. -->

      <echo msg="Finishing release of: ${project_title} v${project_version} ..." />

      <!-- Establish the name of the branch for this release. -->

      <property name="_releases_release_branch" value="release/${project_version}" />

      <if>
        <!-- Quick sanity check. Make sure versions are an exact match. -->
        <not>
          <equals arg1="${_starting_git_release_branch_version}" arg2="${project_version}" />
        </not>
        <then>
          <fail msg="Release/build version mismatch: ${_starting_git_release_branch_version}/${project_version}" />
        </then>
        <else>
          <echo />
          <echo msg="Existing build version matches branch name. OK." />
        </else>
      </if>

      <!-- Make sure the release branch has an upstream remote associated with it. -->

      <exec command="git rev-parse --abbrev-ref '${_releases_release_branch}@{upstream}'" dir="${project.basedir}" returnProperty="_releases_release_git_release_branch_has_upstream_return_status" />
      <if>
        <and>
          <isFailure code="${_releases_release_git_release_branch_has_upstream_return_status}" />
        </and>
        <then>
          <fail msg="The ${_releases_release_branch} branch does not have an upstream tracking branch yet. Please run `git branch --set-upstream-to ...` and try again." />
        </then>
        <else>
          <echo />
          <echo msg="Release branch has an upstream remote. OK." />
        </else>
      </if>

      <!-- Make sure the release branch is not behind the upstream remote by any number of commits. -->

      <exec command="git log --oneline '${_releases_release_branch}..${_releases_release_branch}@{upstream}'" dir="${project.basedir}" outputProperty="_releases_release_git_release_branch_log_output" />
      <if>
        <not>
          <equals arg1="${_releases_release_git_release_branch_log_output}" arg2="" trim="true" />
        </not>
        <then>
          <fail msg="Your local copy of the ${_releases_release_branch} branch is behind in commits. Please merge with the remote and try again." />
        </then>
        <else>
          <echo />
          <echo msg="Release branch is not behind upstream remote. OK." />
        </else>
      </if>

      <!-- If doing a full release, also make sure the dev branch is not behind the upstream remote by any number of commits. -->
      <if>
        <and>
          <isFalse value="${_releases_release_type_is_rc}" />
        </and>
        <then>
          <exec command="git log --oneline '000000-dev..000000-dev@{upstream}'" dir="${project.basedir}" outputProperty="_releases_release_git_release_dev_branch_log_output" />
          <if>
            <not>
              <equals arg1="${_releases_release_git_release_dev_branch_log_output}" arg2="" trim="true" />
            </not>
            <then>
              <fail msg="Your local copy of the dev branch is behind in commits. Please merge with the remote and try again." />
            </then>
            <else>
              <echo />
              <echo msg="Dev branch is not behind upstream remote. OK." />
            </else>
          </if>
        </then>
      </if>

      <!-- If doing a full release, also make sure the master branch is not behind the upstream remote by any number of commits. -->
      <if>
        <and>
          <isFalse value="${_releases_release_type_is_rc}" />
        </and>
        <then>
          <exec command="git log --oneline 'master..master@{upstream}'" dir="${project.basedir}" outputProperty="_releases_release_git_release_master_branch_log_output" />
          <if>
            <not>
              <equals arg1="${_releases_release_git_release_master_branch_log_output}" arg2="" trim="true" />
            </not>
            <then>
              <fail msg="Your local copy of the master branch is behind in commits. Please merge with the remote and try again." />
            </then>
            <else>
              <echo />
              <echo msg="Master branch is not behind upstream remote. OK." />
            </else>
          </if>
        </then>
      </if>

      <!-- Make sure the remote does not already have a tag for this version. Avoid overwriting an existing tag on the remote. -->

      <exec command="git ls-remote --exit-code origin refs/tags/${project_version}" dir="${project.basedir}" returnProperty="_releases_release_git_release_tag_exists_on_remote_return_status" />
      <if>
        <not>
          <isFailure code="${_releases_release_git_release_tag_exists_on_remote_return_status}" />
        </not>
        <then>
          <fail msg="Release tag ${project_version} already exists on the remote." />
        </then>
        <else>
          <echo />
          <echo msg="Upstream remote doees not have this release tag yet. OK." />
        </else>
      </if>

      <!-- Collect the changelog for this version, which is used as the release message.  -->

      <echo />

      <delete file="${_tmp_sub_dir}/${project_slug}-commit-msg" quiet="true" />

      <echo msg="Generating new commit message based on CHANGELOG.md file contents if at all possible." />

      <adHocExtractChangelogForVersion version="${project_version}" inFile="${project.basedir}/CHANGELOG.md" heading="${project_title} v${project_version}" outFile="${_tmp_sub_dir}/${project_slug}-commit-msg" />
      <if>
        <not>
          <available resource="${_tmp_sub_dir}/${project_slug}-commit-msg" type="file" />
        </not>
        <then>
          <echo msg="${project_title} v${project_version}" file="${_tmp_sub_dir}/${project_slug}-commit-msg" />
        </then>
      </if>

      <!-- Collect pre-release status for this release. -->

      <if>
        <and>
          <isTrue value="${_releases_release_type_is_rc}" />
        </and>
        <then>
          <property name="_releases_release_git_create_pre" value=" -p" />
        </then>
        <else>
          <property name="_releases_release_git_create_pre" value="" />
        </else>
      </if>

      <!-- Collect draft status for this release. -->

      <if>
        <or>
          <and>
            <not>
              <isset property="draft" />
            </not>
            <isTrue value="${_is_pro_project}" />
          </and>
          <and>
            <isset property="draft" />
            <isTrue value="${draft}" />
          </and>
        </or>
        <then>
          <property name="_releases_release_git_create_draft" value=" -d" />
        </then>
        <else>
          <property name="_releases_release_git_create_draft" value="" />
        </else>
      </if>

      <!-- Collect distros that we can append to the release. -->

      <if>
        <and>
          <available resource="${project.basedir}/.~build/${project_slug}.phar" type="file" />
        </and>
        <then>
          <property name="_releases_release_git_create_assets" value="-a '${project.basedir}/.~build/${project_slug}.zip' -a '${project.basedir}/.~build/${project_slug}.tar.gz' -a '${project.basedir}/.~build/${project_slug}.phar'" />
        </then>
        <else>
          <property name="_releases_release_git_create_assets" value="-a '${project.basedir}/.~build/${project_slug}.zip' -a '${project.basedir}/.~build/${project_slug}.tar.gz'" />
        </else>
      </if>

      <!-- RC: Create an annotated tag and push RC branch (including tags) to remote. Don't delete the release branch.  -->
      <!-- Formal: Push release to remote, merge release into master, create an annotated tag, push master branch (including tags) to remote.  -->
      <!-- Formal: Also back-merge master branch into dev branch (just in case) and then push any changes to remote origin. -->

      <if>
        <and>
          <isTrue value="${_releases_release_type_is_rc}" />
        </and>
        <then>
          <echo />

          <echo msg="Creating annotated RC tag ${project_version}; targeted at ${_releases_release_branch} branch." />
          <!-- Still on the release branch at this point. No need to run `git checkout`. -->
          <exec command="git tag --force --annotate ${project_version} --message='${project_title} v${project_version} via Phing.'" dir="${project.basedir}" checkReturn="true" />

          <echo />

          <echo msg="Pushing ${_releases_release_branch} branch (and tags) to remote origin." />
          <!-- Still on the release branch at this point. No need to run `git checkout`. -->
          <exec command="git push --tags origin ${_releases_release_branch}" dir="${project.basedir}" checkReturn="true" />
        </then>
        <else>
          <echo />

          <echo msg="Pushing ${_releases_release_branch} branch to remote origin." />
          <!-- Still on the release branch at this point. No need to run `git checkout`. -->
          <exec command="git push origin ${_releases_release_branch}" dir="${project.basedir}" checkReturn="true" />

          <echo />

          <echo msg="Merging ${_releases_release_branch} into master branch." />
          <exec command="git checkout master" dir="${project.basedir}" checkReturn="true" />
          <exec command="git merge ${_releases_release_branch} -m 'Merging ${_releases_release_branch} into master via Phing.'" dir="${project.basedir}" checkReturn="true" />

          <echo />

          <echo msg="Creating annotated tag ${project_version}; targeted at master branch." />
          <!-- Still on the master branch at this point. No need to run `git checkout`. -->
          <exec command="git tag --force --annotate ${project_version} --message='${project_title} v${project_version} via Phing.'" dir="${project.basedir}" checkReturn="true" />

          <echo />

          <echo msg="Pushing master branch (and tags) to remote origin." />
          <!-- Still on the master branch at this point. No need to run `git checkout`. -->
          <exec command="git push --tags origin master" dir="${project.basedir}" checkReturn="true" />

          <echo />

          <echo msg="Back-merging master branch into dev branch." />
          <exec command="git checkout 000000-dev" dir="${project.basedir}" checkReturn="true" />
          <exec command="git merge master -m 'Back-merging master into dev after release via Phing.'" dir="${project.basedir}" checkReturn="true" />

          <echo />

          <echo msg="Pushing dev branch to remote origin." />
          <!-- Still on the dev branch at this point. No need to run `git checkout`. -->
          <exec command="git push origin 000000-dev" dir="${project.basedir}" checkReturn="true" />
        </else>
      </if>

      <!-- Create release notes/downloads using the `hub` tool provided by GitHub. -->
      <!-- Also, collect and verify the existence of a release URL. Release URL is output by the `hub` tool. -->
      <!-- Then, print the release URL for the operator; i.e., so the release can be reviewed in a browser. -->

      <if>
        <and>
          <isTrue value="${_releases_release_type_is_rc}" />
        </and>
        <then>
          <echo />

          <echo msg="Creating GitHub release tagged: ${project_version}; targeted at ${_releases_release_branch} branch." />
          <exec command="git checkout ${_releases_release_branch}" dir="${project.basedir}" checkReturn="true" />
        </then>
        <else>
          <echo />

          <echo msg="Creating GitHub release tagged: ${project_version}; targeted at master branch." />
          <exec command="git checkout master" dir="${project.basedir}" checkReturn="true" />
        </else>
      </if>

      <property name="_releases_release_git_create_command" value="hub release create -f '${_tmp_sub_dir}/${project_slug}-commit-msg'${_releases_release_git_create_pre}${_releases_release_git_create_draft} ${_releases_release_git_create_assets} ${project_version}" />
      <exec command="${_releases_release_git_create_command}" dir="${project.basedir}" checkReturn="true" outputProperty="_releases_release_git_create_output" />

      <property name="_releases_release_git_create_release_url" value="${_releases_release_git_create_output}">
        <filterChain>
          <replaceRegExp>
            <regExp pattern=".*?(https?\:\/\/[^\s]+?\/releases\/[^\s]+).*" replace="$1" modifiers="uis" />
          </replaceRegExp>
        </filterChain>
      </property>
      <if>
        <not>
          <contains string="${_releases_release_git_create_release_url}" substring="/releases/" caseSensitive="false" />
        </not>
        <then>
          <fail msg="Unable to acquire release URL for unknown reason." />
        </then>
        <else>
          <echo msg="Release URL: ${_releases_release_git_create_release_url}" />
          <echo msg="${_releases_release_git_create_release_url}" file="${_tmp_sub_dir}/${project_slug}-releases-clipboard" append="true" />
        </else>
      </if>

      <!-- RC: Nothing to do here. An RC release branch should remain in case of any tweaks/additions being necessary. -->
      <!-- Formal: Delete the release branch (done with it now). Delete locally and delete the remote too.  -->

      <if>
        <and>
          <isFalse value="${_releases_release_type_is_rc}" />
        </and>
        <then>
          <echo />

          <echo msg="Deleting ${_releases_release_branch} branch from local repo &amp; remote origin." />
          <exec command="git checkout 000000-dev" dir="${project.basedir}" checkReturn="true" />
          <exec command="git branch --delete --force ${_releases_release_branch}" dir="${project.basedir}" checkReturn="true" />
          <exec command="git push origin --delete ${_releases_release_branch}" dir="${project.basedir}" checkReturn="true" />
        </then>
      </if>

      <!-- RC: Switch to the release branch now in case tweaks/additions are necessary. -->
      <!-- Formal: Switch back to starting branch, unless that was the release branch, which no longer exists. -->

      <if>
        <and>
          <isTrue value="${_releases_release_type_is_rc}" />
        </and>
        <then>
          <exec command="git checkout ${_releases_release_branch}" dir="${project.basedir}" checkReturn="true" />
        </then>
        <else>
          <if>
            <and>
              <equals arg1="${_starting_git_branch}" arg2="${_releases_release_branch}" />
            </and>
            <then>
              <exec command="git checkout 000000-dev" dir="${project.basedir}" checkReturn="true" />
            </then>
            <else>
              <exec command="git checkout ${_starting_git_branch}" dir="${project.basedir}" checkReturn="true" />
            </else>
          </if>
        </else>
      </if>

      <!-- Possible lite release. -->
      <if>
        <and>
          <not>
            <isset property="_is_lite_build" />
          </not>
          <isTrue value="${_has_lite_build_props}" />
        </and>
        <then>
          <phingCall target="-releases-lite-release-finish" />
        </then>
      </if>

      <!-- Handle release uploads. -->

      <phingCall target="-releases-upload" />

      <!-- Notify operator about clipboard contents. -->

      <phingCall target="-releases-clipboard" />

    </target>

  </project>
