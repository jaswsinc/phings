<?xml version="1.0" encoding="UTF-8" ?>

<project>

  <!-- ============================================  -->
  <!-- Start a new GitHub release. -->
  <!-- ============================================  -->

  <target name="-releases-release-start" hidden="true">

    <!-- Begin by stating what is about to happen here. -->

    <echo msg="Starting a new release of ${project_title} ..." />

    <!-- Determine release version (complex conditionals) and branch name. -->

    <if>
      <!-- If starting from an existing release, establish new version. -->
      <and>
        <isTrue value="${_starting_git_branch_is_release}" />
      </and>
      <then>
        <loadFile property="_releases_release_build_props_file_contents" file="${project.basedir}/.build.props" />

        <property name="_releases_release_new_version" value="${_releases_release_build_props_file_contents}">
          <filterChain>
            <replaceRegExp>
              <regExp pattern=".*?\nproject_version\s*\=\s*([^\s]+).*" replace="$1" modifiers="us" />
            </replaceRegExp>
          </filterChain>
        </property>

        <if>
          <!-- If it's not being auto-generated by date, ask operator. -->
          <not>
            <contains string="${_releases_release_new_version}" substring="%y%m%d" />
          </not>
          <then>
            <property name="_releases_release_new_version" value="%y%m%d.%now" override="true" />
            <input propertyName="_releases_release_new_version_via_input" validArgs="%y%m%d,%y%m%d.%now">Enter one of these release version formats:</input>
            <property name="_releases_release_new_version" value="${_releases_release_new_version_via_input}" override="true" />
          </then>
        </if>

        <php expression="str_replace('%y%m%d', date('ymd'), '${_releases_release_new_version}')" returnProperty="_releases_release_new_version" level="verbose" />
        <php expression="str_replace('%now', time() % 86400, '${_releases_release_new_version}')" returnProperty="_releases_release_new_version" level="verbose" />
      </then>
      <else>
        <!-- Else respect ${project_version}, including a case where it's passed via the command line. -->
        <property name="_releases_release_new_version" value="${project_version}" />
      </else>
    </if>

    <property name="_releases_release_new_version" value="${_releases_release_new_version}" override="true">
      <filterChain>
        <replaceRegExp>
          <regExp pattern="\-RC$" replace="" modifiers="ui" />
        </replaceRegExp>
      </filterChain>
    </property>

    <if>
      <and>
        <isTrue value="${_releases_release_type_is_rc}" />
      </and>
      <then>
        <property name="_releases_release_new_version" value="${_releases_release_new_version}-RC" override="true" />
      </then>
    </if>

    <property name="_releases_release_branch" value="release/${_releases_release_new_version}" />

    <!-- If release branch already exists, move to that branch. Else, create a new release branch and push to remote origin. -->
    <!-- Branch may already exist locally or remotely. In either case, avoid creating a duplicate release branch here. -->

    <exec command="git rev-parse --verify --quiet ${_releases_release_branch}" dir="${project.basedir}" returnProperty="_releases_release_branch_exists_locally_return_status" />
    <exec command="git ls-remote --exit-code origin refs/heads/${_releases_release_branch}" dir="${project.basedir}" returnProperty="_releases_release_branch_exists_remotely_return_status" />
    <if>
      <not>
        <isFailure code="${_releases_release_branch_exists_locally_return_status}" />
      </not>
      <then>
        <echo />

        <echo msg="Branch ${_releases_release_branch} already exists locally." />
        <echo msg="Moving you to existing local ${_releases_release_branch} branch." />
        <exec command="git checkout ${_releases_release_branch}" dir="${project.basedir}" checkReturn="true" />
      </then>
      <elseif>
        <not>
          <isFailure code="${_releases_release_branch_exists_remotely_return_status}" />
        </not>
        <then>
          <echo />

          <echo msg="Branch ${_releases_release_branch} already exists remotely." />
          <echo msg="Creating a new ${_releases_release_branch} branch locally; based on existing remote origin." />
          <exec command="git checkout -b ${_releases_release_branch} origin/${_releases_release_branch}" dir="${project.basedir}" checkReturn="true" />
        </then>
      </elseif>
      <else>
        <echo />

        <echo msg="Release branch doesn't exist locally or remotely. OK." />

        <echo />

        <echo msg="Creating ${_releases_release_branch} branch; based on ${_starting_git_branch}." />
        <exec command="git checkout -b ${_releases_release_branch}" dir="${project.basedir}" checkReturn="true" />

        <echo msg="Pushing ${_releases_release_branch} branch to remote origin." />
        <exec command="git push --set-upstream origin ${_releases_release_branch}" dir="${project.basedir}" checkReturn="true" />
      </else>
    </if>

    <!-- Delete any existing .~build directory. This is now stale. -->
    <echo />

    <echo msg="Removing stale .~build directory; i.e., expecting a new build soon." />
    <delete dir="${project.basedir}/.~build" includeEmptyDirs="true" quiet="true" />

    <!-- Provide operator with some feedback about what just happened and what comes next. -->

    <echo />

    <echo msg="Nice! A new release is coming soon. Run `$ phing full-build-all` when ready." />

  </target>

</project>
