<?xml version="1.0" encoding="UTF-8" ?>

  <project>

    <!-- ============================================  -->
    <!-- Create a GitHub release.  -->
    <!-- ============================================  -->

    <target name="-releases-release" hidden="true">

      <!-- Preparing for release creation. -->

      <echo msg="Preparing to create GitHub release: ${project_title} v${project_version}" />

      <!-- Check current git repo status and make sure it is clean. -->

      <exec command="git status --short" dir="${project.basedir}" outputProperty="_releases_release_git_status" />
      <if>
        <not>
          <equals arg1="${_releases_release_git_status}" arg2="" trim="true" />
        </not>
        <then>
          <fail msg="Repo is dirty. Please commit and push changes." />
        </then>
      </if>

      <!-- Check current git repo and make sure we are on a release/ branch. -->

      <exec command="git symbolic-ref --short --quiet HEAD" dir="${project.basedir}" outputProperty="_releases_release_git_branch" />
      <if>
        <not>
          <contains string="${_releases_release_git_branch}" substring="release/" caseSensitive="true" />
        </not>
        <then>
          <fail msg="Must start from a release/ branch. See: https://github.com/websharks/hubflow" />
        </then>
      </if>

      <!-- Check current git repo to be sure that it has a github.com origin.  -->

      <exec command="git remote -v | grep --extended-regexp --ignore-case '^origin\s.+?github\.com'" dir="${project.basedir}" returnProperty="_releases_release_git_has_github_origin" />
      <if>
        <not>
          <equals arg1="${_releases_release_git_has_github_origin}" arg2="0" trim="true" />
        </not>
        <then>
          <fail msg="Repo does not have a github.com origin." />
        </then>
      </if>

      <!-- Collect the changelog for this version, which is used as the release message.  -->

      <delete file="${project.basedir}/.~build/.~commit.msg" quiet="true" />
      <adHocExtractChangelogForVersion version="${project_version}" inFile="${project.basedir}/CHANGELOG.md" heading="${project_title} v${project_version}" outFile="${project.basedir}/.~build/.~commit.msg" />
      <if>
        <not>
          <available resource="${project.basedir}/.~build/.~commit.msg" type="file" />
        </not>
        <then>
          <echo msg="${project_title} v${project_version}" file="${project.basedir}/.~build/.~commit.msg" />
        </then>
      </if>

      <!-- Collect pre-release status for this release. -->

      <if>
        <and>
          <isset property="type" />
          <contains string="${type}" substring="pre" caseSensitive="false" />
        </and>
        <then>
          <property name="_releases_release_git_create_pre" value=" -p" />
        </then>
        <else>
          <property name="_releases_release_git_create_pre" value="" />
        </else>
      </if>

      <!-- Collect draft status for this release. -->

      <if>
        <or>
          <and>
            <not>
              <isset property="draft" />
            </not>
            <isTrue value="${_is_pro_project}" />
          </and>
          <and>
            <isset property="draft" />
            <isTrue value="${draft}" />
          </and>
        </or>
        <then>
          <property name="_releases_release_git_create_draft" value=" -d" />
        </then>
        <else>
          <property name="_releases_release_git_create_draft" value="" />
        </else>
      </if>

      <!-- Collect distros that we can append to the release. -->

      <if>
        <and>
          <available resource="${project.basedir}/.~build/${project_slug}.phar" type="file" />
        </and>
        <then>
          <property name="_releases_release_git_create_assets" value="-a '${project.basedir}/.~build/${project_slug}.phar' -a '${project.basedir}/.~build/${project_slug}.zip' -a '${project.basedir}/.~build/${project_slug}.tar.gz'" />
        </then>
        <else>
          <property name="_releases_release_git_create_assets" value="-a '${project.basedir}/.~build/${project_slug}.zip' -a '${project.basedir}/.~build/${project_slug}.tar.gz'" />
        </else>
      </if>

      <!-- We are currently on a clean release/ branch. Start by pushing this branch to the remote in case that hasn't been done yet. -->

      <echo />

      <echo msg="Updating remote; i.e., pushing current `${_releases_release_git_branch}` branch." />

      <exec command="git push --set-upstream origin ${_releases_release_git_branch}" dir="${project.basedir}" passthru="false" checkReturn="true" />

      <!-- Switch to master branch, merge release/ into master, create an annotated tag, and push master branch (including tags) to remote.  -->

      <echo />

      <echo msg="Merging ${_releases_release_git_branch} into master and creating annotated tag `${project_version}`; targeted at master branch." />

      <exec command="git checkout master" dir="${project.basedir}" passthru="false" checkReturn="true" />
      <exec command="git merge ${_releases_release_git_branch} -m 'Merging ${_releases_release_git_branch} into master via Phing.'" dir="${project.basedir}" passthru="false" checkReturn="true" />
      <exec command="git tag --annotate ${project_version} --message='${project_title} v${project_version} via Phing.'" dir="${project.basedir}" passthru="false" checkReturn="true" />
      <exec command="git push --tags --set-upstream origin master" dir="${project.basedir}" passthru="false" checkReturn="true" />

      <!-- Still on master branch. Create a formal release using the `hub` tool provided by GitHub. In the case of a draft, no tag is generated by GitHub, but we created one anyway. -->
      <!-- Also, collect and verify the existence of a release URL. Release URL is output by the `hub` tool. -->
      <!-- Then, print the release URL for the operator; i.e., so the release can be reviewed in a browser. -->

      <echo />

      <echo msg="Creating GitHub release tagged: `${project_version}`; targeted at master branch." />

      <property name="_releases_release_git_create_command" value="hub release create -f '${project.basedir}/.~build/.~commit.msg'${_releases_release_git_create_pre}${_releases_release_git_create_draft} ${_releases_release_git_create_assets} ${project_version}" />
      <exec command="${_releases_release_git_create_command}" dir="${project.basedir}" passthru="false" checkReturn="true" outputProperty="_releases_release_git_create_output" />

      <property name="_releases_release_git_create_release_url" value="${_releases_release_git_create_output}">
        <filterChain>
          <replaceRegExp>
            <regExp pattern=".*?(https?\:\/\/[^\s]+?\/releases\/[^\s]+).*" replace="$1" modifiers="uis" />
          </replaceRegExp>
        </filterChain>
      </property>
      <if>
        <not>
          <contains string="${_releases_release_git_create_release_url}" substring="/releases/" caseSensitive="false" />
        </not>
        <then>
          <fail msg="Unable to acquire release URL for unknown reason." />
        </then>
        <else>
          <echo msg="Release URL: &lt;${_releases_release_git_create_release_url}&gt;" />
        </else>
      </if>

      <!-- Switch back to the release/ branch so the operator is back where they started from. -->

      <exec command="git checkout ${_releases_release_git_branch}" dir="${project.basedir}" passthru="false" checkReturn="true" />

    </target>

  </project>
