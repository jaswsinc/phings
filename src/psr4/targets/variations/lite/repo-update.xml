<?xml version="1.0" encoding="UTF-8" ?>

  <project>

    <!-- ============================================  -->
    <!-- Update lite repo (including remote). -->
    <!-- ============================================  -->

    <target name="-variations-lite-repo-update" hidden="true">

      <if>
        <and>
          <not>
            <isset property="_is_lite_build" />
          </not>
          <isTrue value="${_has_lite_build_props}" />
        </and>
        <then>
          <!-- Preparing to update lite repo. -->

          <property name="_variations_lite_repo_update_repo_remote" value="git@github.com:${project_owner}/${project_lite_slug}.git" />
          <property name="_variations_lite_repo_update_repo_dir" value="${project.basedir}/.~build/${project_lite_slug}/.~build/${project_lite_slug}-repo" />

          <echo msg="Preparing to update ${project_lite_title} and push to ${_variations_lite_repo_update_repo_remote}" />

          <!-- Clone lite repository from the remote. -->

          <echo />

          <echo msg="Cloning remote lite repo for local update routines that follow." />

          <delete dir="${_variations_lite_repo_update_repo_dir}" includeEmptyDirs="true" quiet="true" />
          <exec command="git clone '${_variations_lite_repo_update_repo_remote}' '${_variations_lite_repo_update_repo_dir}' --depth=1" passthru="false" checkReturn="true" />

          <!-- Make sure both of these branches exist (at HEAD) and start from the 000000-dev branch. -->
          <!-- Note the interesting use of the `-B` flag below. See also: <https://git-scm.com/docs/git-checkout> -->

          <echo />

          <echo msg="Forcing the existence of both a dev and master branch." />

          <exec command="git checkout -B master" dir="${_variations_lite_repo_update_repo_dir}" passthru="false" checkReturn="true" />
          <exec command="git checkout -B 000000-dev" dir="${_variations_lite_repo_update_repo_dir}" passthru="false" checkReturn="true" />

          <!-- Delete all existing files in lite dev branch. -->

          <echo />

          <echo msg="Deleting (clearing out) all files in dev branch of the newly-cloned repo." />

          <delete includeEmptyDirs="true" quiet="true">
            <fileSet dir="${_variations_lite_repo_update_repo_dir}" caseSensitive="false" defaultExcludes="false">
              <exclude pattern=".git" />
              <exclude pattern=".git/**" />
            </fileSet>
          </delete>

          <!-- Copy new files into lite dev branch. -->
          <!-- Force changes to exist in the lite dev branch so that commit/push does not choke. -->

          <echo />

          <echo msg="Updating dev branch to: ${project.basedir}/.~build/${project_lite_slug} (i.e., most recent build of the lite variation)." />

          <copy toDir="${_variations_lite_repo_update_repo_dir}">
            <fileSet dir="${project.basedir}/.~build/${project_lite_slug}" caseSensitive="false" defaultExcludes="false">
              <patternSet refId="_lite_repo_pattern_set" />
            </fileSet>
          </copy>

          <php expression="time()" returnProperty="_variations_lite_repo_update_timestamp" />
          <echo msg="${_variations_lite_repo_update_timestamp}" file="${_variations_lite_repo_update_repo_dir}/.gitchange" />

          <!-- Stage and commit changes (from the dev branch still). -->

          <echo />

          <echo msg="Committing changes in lite dev branch." />

          <delete file="${_variations_lite_repo_update_repo_dir}/.~commit.msg" quiet="true" />
          <adHocExtractChangelogForVersion version="${project_version}" inFile="${_variations_lite_repo_update_repo_dir}/CHANGELOG.md" heading="Phing release of v${project_version} with the following changes:" outFile="${_variations_lite_repo_update_repo_dir}/.~commit.msg" />
          <if>
            <not>
              <available resource="${_variations_lite_repo_update_repo_dir}/.~commit.msg" type="file" />
            </not>
            <then>
              <echo msg="Phing release of v${project_version}." file="${_variations_lite_repo_update_repo_dir}/.~commit.msg" />
            </then>
          </if>
          <exec command="git add --all" dir="${_variations_lite_repo_update_repo_dir}" passthru="false" checkReturn="true" />
          <exec command="git commit --file .~commit.msg" dir="${_variations_lite_repo_update_repo_dir}" passthru="false" checkReturn="true" />

          <!-- Merge dev into master and push all changes (for dev and master) to remote. -->

          <echo />

          <echo msg="Merging dev into master branch and pushing all changes (for dev and master) to remote." />

          <exec command="git checkout master" dir="${_variations_lite_repo_update_repo_dir}" passthru="false" checkReturn="true" />
          <exec command="git merge 000000-dev -m 'Merging dev into master via Phing.'" dir="${_variations_lite_repo_update_repo_dir}" passthru="false" checkReturn="true" />
          <exec command="git push --set-upstream origin master" dir="${_variations_lite_repo_update_repo_dir}" passthru="false" checkReturn="true" />

          <exec command="git checkout 000000-dev" dir="${_variations_lite_repo_update_repo_dir}" passthru="false" checkReturn="true" />
          <exec command="git push --set-upstream origin 000000-dev" dir="${_variations_lite_repo_update_repo_dir}" passthru="false" checkReturn="true" />

        </then>
        <else>
          <echo msg="N/A: skipping lite repo update; lite not applicable." />
        </else>
      </if>

    </target>

  </project>
